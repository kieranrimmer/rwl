Terminals unused in grammar

   CLASS
   ELSE
   FI
   IF
   IN
   INHERITS
   LET
   LOOP
   POOL
   THEN
   WHILE
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   NOT
   LE
   ERROR
   UPPER
   LOWER
   CHAR
   BOOL_CONST


Grammar

    0 $accept: program "end of file"

    1 program: explist

    2 explist: explist NEWLINE
    3        | explist exp NEWLINE
    4        | explist error NEWLINE
    5        | %empty

    6 exp: PRINT exp
    7    | '{' explist '}'
    8    | WORD ASSIGN exp
    9    | TYPE_DECL WORD ASSIGN exp
   10    | DEF TYPE_DECL WORD '(' ')' '{' exp '}'
   11    | INTEGER_CONST
   12    | WORD '(' ')'
   13    | WORD
   14    | STRING


Terminals, with rules where they appear

"end of file" (0) 0
'(' (40) 10 12
')' (41) 10 12
'{' (123) 7 10
'}' (125) 7 10
error (256) 4
CLASS (258)
ELSE (259)
FI (260)
IF (261)
IN (262)
INHERITS (263)
LET (264)
LOOP (265)
POOL (266)
THEN (267)
WHILE (268)
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
ASSIGN (280) 8 9
NOT (281)
LE (282)
ERROR (283)
UPPER (284)
LOWER (285)
WORD (286) 8 9 10 12 13
NEWLINE (287) 2 3 4
CHAR (288)
PRINT (289) 6
STRING (290) 14
INTEGER_CONST (291) 11
BOOL_CONST (292)
TYPE_DECL (293) 9 10
DEF (294) 10


Nonterminals, with rules where they appear

$accept (39)
    on left: 0
program (40)
    on left: 1, on right: 0
explist (41)
    on left: 2 3 4 5, on right: 1 2 3 4 7
exp (42)
    on left: 6 7 8 9 10 11 12 13 14, on right: 3 6 8 9 10


State 0

    0 $accept: . program "end of file"

    $default  reduce using rule 5 (explist)

    program  go to state 1
    explist  go to state 2


State 1

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 3


State 2

    1 program: explist .
    2 explist: explist . NEWLINE
    3        | explist . exp NEWLINE
    4        | explist . error NEWLINE

    error          shift, and go to state 4
    WORD           shift, and go to state 5
    NEWLINE        shift, and go to state 6
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12

    "end of file"  reduce using rule 1 (program)

    exp  go to state 13


State 3

    0 $accept: program "end of file" .

    $default  accept


State 4

    4 explist: explist error . NEWLINE

    NEWLINE  shift, and go to state 14


State 5

    8 exp: WORD . ASSIGN exp
   12    | WORD . '(' ')'
   13    | WORD .

    ASSIGN  shift, and go to state 15
    '('     shift, and go to state 16

    $default  reduce using rule 13 (exp)


State 6

    2 explist: explist NEWLINE .

    $default  reduce using rule 2 (explist)


State 7

    6 exp: PRINT . exp

    WORD           shift, and go to state 5
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12

    exp  go to state 17


State 8

   14 exp: STRING .

    $default  reduce using rule 14 (exp)


State 9

   11 exp: INTEGER_CONST .

    $default  reduce using rule 11 (exp)


State 10

    9 exp: TYPE_DECL . WORD ASSIGN exp

    WORD  shift, and go to state 18


State 11

   10 exp: DEF . TYPE_DECL WORD '(' ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 19


State 12

    7 exp: '{' . explist '}'

    $default  reduce using rule 5 (explist)

    explist  go to state 20


State 13

    3 explist: explist exp . NEWLINE

    NEWLINE  shift, and go to state 21


State 14

    4 explist: explist error NEWLINE .

    $default  reduce using rule 4 (explist)


State 15

    8 exp: WORD ASSIGN . exp

    WORD           shift, and go to state 5
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12

    exp  go to state 22


State 16

   12 exp: WORD '(' . ')'

    ')'  shift, and go to state 23


State 17

    6 exp: PRINT exp .

    $default  reduce using rule 6 (exp)


State 18

    9 exp: TYPE_DECL WORD . ASSIGN exp

    ASSIGN  shift, and go to state 24


State 19

   10 exp: DEF TYPE_DECL . WORD '(' ')' '{' exp '}'

    WORD  shift, and go to state 25


State 20

    2 explist: explist . NEWLINE
    3        | explist . exp NEWLINE
    4        | explist . error NEWLINE
    7 exp: '{' explist . '}'

    error          shift, and go to state 4
    WORD           shift, and go to state 5
    NEWLINE        shift, and go to state 6
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12
    '}'            shift, and go to state 26

    exp  go to state 13


State 21

    3 explist: explist exp NEWLINE .

    $default  reduce using rule 3 (explist)


State 22

    8 exp: WORD ASSIGN exp .

    $default  reduce using rule 8 (exp)


State 23

   12 exp: WORD '(' ')' .

    $default  reduce using rule 12 (exp)


State 24

    9 exp: TYPE_DECL WORD ASSIGN . exp

    WORD           shift, and go to state 5
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12

    exp  go to state 27


State 25

   10 exp: DEF TYPE_DECL WORD . '(' ')' '{' exp '}'

    '('  shift, and go to state 28


State 26

    7 exp: '{' explist '}' .

    $default  reduce using rule 7 (exp)


State 27

    9 exp: TYPE_DECL WORD ASSIGN exp .

    $default  reduce using rule 9 (exp)


State 28

   10 exp: DEF TYPE_DECL WORD '(' . ')' '{' exp '}'

    ')'  shift, and go to state 29


State 29

   10 exp: DEF TYPE_DECL WORD '(' ')' . '{' exp '}'

    '{'  shift, and go to state 30


State 30

   10 exp: DEF TYPE_DECL WORD '(' ')' '{' . exp '}'

    WORD           shift, and go to state 5
    PRINT          shift, and go to state 7
    STRING         shift, and go to state 8
    INTEGER_CONST  shift, and go to state 9
    TYPE_DECL      shift, and go to state 10
    DEF            shift, and go to state 11
    '{'            shift, and go to state 12

    exp  go to state 31


State 31

   10 exp: DEF TYPE_DECL WORD '(' ')' '{' exp . '}'

    '}'  shift, and go to state 32


State 32

   10 exp: DEF TYPE_DECL WORD '(' ')' '{' exp '}' .

    $default  reduce using rule 10 (exp)
