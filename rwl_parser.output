Terminals unused in grammar

   CLASS
   ELSE
   FI
   IF
   IN
   INHERITS
   LET
   LOOP
   POOL
   THEN
   WHILE
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   NOT
   LE
   ERROR
   UPPER
   LOWER
   CHAR
   BOOL_CONST


State 0 conflicts: 7 shift/reduce
State 7 conflicts: 7 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: explist

    2 explist: exp NEWLINE
    3        | explist exp NEWLINE
    4        | explist error NEWLINE
    5        | %empty

    6 explist_params: explist_params ',' exp
    7               | exp
    8               | %empty

    9 exp: PRINT exp
   10    | '{' explist '}'
   11    | WORD ASSIGN exp
   12    | TYPE_DECL WORD ASSIGN exp
   13    | DEF TYPE_DECL WORD '(' explist_params ')' '{' exp '}'
   14    | INTEGER_CONST
   15    | WORD '(' ')'
   16    | WORD
   17    | STRING


Terminals, with rules where they appear

"end of file" (0) 0
'(' (40) 13 15
')' (41) 13 15
',' (44) 6
'{' (123) 10 13
'}' (125) 10 13
error (256) 4
CLASS (258)
ELSE (259)
FI (260)
IF (261)
IN (262)
INHERITS (263)
LET (264)
LOOP (265)
POOL (266)
THEN (267)
WHILE (268)
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
ASSIGN (280) 11 12
NOT (281)
LE (282)
ERROR (283)
UPPER (284)
LOWER (285)
WORD (286) 11 12 13 15 16
NEWLINE (287) 2 3 4
CHAR (288)
PRINT (289) 9
STRING (290) 17
INTEGER_CONST (291) 14
BOOL_CONST (292)
TYPE_DECL (293) 12 13
DEF (294) 13


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
explist (42)
    on left: 2 3 4 5, on right: 1 3 4 10
explist_params (43)
    on left: 6 7 8, on right: 6 13
exp (44)
    on left: 9 10 11 12 13 14 15 16 17, on right: 2 3 6 7 9 11 12 13


State 0

    0 $accept: . program "end of file"

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    program  go to state 8
    explist  go to state 9
    exp      go to state 10


State 1

   11 exp: WORD . ASSIGN exp
   15    | WORD . '(' ')'
   16    | WORD .

    ASSIGN  shift, and go to state 11
    '('     shift, and go to state 12

    $default  reduce using rule 16 (exp)


State 2

    9 exp: PRINT . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 13


State 3

   17 exp: STRING .

    $default  reduce using rule 17 (exp)


State 4

   14 exp: INTEGER_CONST .

    $default  reduce using rule 14 (exp)


State 5

   12 exp: TYPE_DECL . WORD ASSIGN exp

    WORD  shift, and go to state 14


State 6

   13 exp: DEF . TYPE_DECL WORD '(' explist_params ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 15


State 7

   10 exp: '{' . explist '}'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    explist  go to state 16
    exp      go to state 10


State 8

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 17


State 9

    1 program: explist .
    3 explist: explist . exp NEWLINE
    4        | explist . error NEWLINE

    error          shift, and go to state 18
    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    "end of file"  reduce using rule 1 (program)

    exp  go to state 19


State 10

    2 explist: exp . NEWLINE

    NEWLINE  shift, and go to state 20


State 11

   11 exp: WORD ASSIGN . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 21


State 12

   15 exp: WORD '(' . ')'

    ')'  shift, and go to state 22


State 13

    9 exp: PRINT exp .

    $default  reduce using rule 9 (exp)


State 14

   12 exp: TYPE_DECL WORD . ASSIGN exp

    ASSIGN  shift, and go to state 23


State 15

   13 exp: DEF TYPE_DECL . WORD '(' explist_params ')' '{' exp '}'

    WORD  shift, and go to state 24


State 16

    3 explist: explist . exp NEWLINE
    4        | explist . error NEWLINE
   10 exp: '{' explist . '}'

    error          shift, and go to state 18
    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7
    '}'            shift, and go to state 25

    exp  go to state 19


State 17

    0 $accept: program "end of file" .

    $default  accept


State 18

    4 explist: explist error . NEWLINE

    NEWLINE  shift, and go to state 26


State 19

    3 explist: explist exp . NEWLINE

    NEWLINE  shift, and go to state 27


State 20

    2 explist: exp NEWLINE .

    $default  reduce using rule 2 (explist)


State 21

   11 exp: WORD ASSIGN exp .

    $default  reduce using rule 11 (exp)


State 22

   15 exp: WORD '(' ')' .

    $default  reduce using rule 15 (exp)


State 23

   12 exp: TYPE_DECL WORD ASSIGN . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 28


State 24

   13 exp: DEF TYPE_DECL WORD . '(' explist_params ')' '{' exp '}'

    '('  shift, and go to state 29


State 25

   10 exp: '{' explist '}' .

    $default  reduce using rule 10 (exp)


State 26

    4 explist: explist error NEWLINE .

    $default  reduce using rule 4 (explist)


State 27

    3 explist: explist exp NEWLINE .

    $default  reduce using rule 3 (explist)


State 28

   12 exp: TYPE_DECL WORD ASSIGN exp .

    $default  reduce using rule 12 (exp)


State 29

   13 exp: DEF TYPE_DECL WORD '(' . explist_params ')' '{' exp '}'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    $default  reduce using rule 8 (explist_params)

    explist_params  go to state 30
    exp             go to state 31


State 30

    6 explist_params: explist_params . ',' exp
   13 exp: DEF TYPE_DECL WORD '(' explist_params . ')' '{' exp '}'

    ','  shift, and go to state 32
    ')'  shift, and go to state 33


State 31

    7 explist_params: exp .

    $default  reduce using rule 7 (explist_params)


State 32

    6 explist_params: explist_params ',' . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 34


State 33

   13 exp: DEF TYPE_DECL WORD '(' explist_params ')' . '{' exp '}'

    '{'  shift, and go to state 35


State 34

    6 explist_params: explist_params ',' exp .

    $default  reduce using rule 6 (explist_params)


State 35

   13 exp: DEF TYPE_DECL WORD '(' explist_params ')' '{' . exp '}'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 36


State 36

   13 exp: DEF TYPE_DECL WORD '(' explist_params ')' '{' exp . '}'

    '}'  shift, and go to state 37


State 37

   13 exp: DEF TYPE_DECL WORD '(' explist_params ')' '{' exp '}' .

    $default  reduce using rule 13 (exp)
