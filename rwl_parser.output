Terminals unused in grammar

   CLASS
   ELSE
   FI
   IF
   IN
   INHERITS
   LET
   LOOP
   POOL
   THEN
   WHILE
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   NOT
   LE
   ERROR
   UPPER
   LOWER
   NEWLINE
   CHAR
   BOOL_CONST


State 0 conflicts: 7 shift/reduce
State 7 conflicts: 7 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: explist

    2 explist: exp
    3        | explist exp
    4        | explist error
    5        | %empty

    6 explist_params: explist_params ',' exp
    7               | exp
    8               | %empty

    9 formal: TYPE_DECL WORD

   10 formals: formals ',' formal
   11        | formal
   12        | %empty

   13 exp: PRINT exp
   14    | '{' explist '}'
   15    | WORD ASSIGN exp
   16    | TYPE_DECL WORD ASSIGN exp
   17    | DEF TYPE_DECL WORD '(' formals ')' '{' exp '}'
   18    | INTEGER_CONST
   19    | WORD '(' explist_params ')'
   20    | WORD
   21    | STRING


Terminals, with rules where they appear

"end of file" (0) 0
'(' (40) 17 19
')' (41) 17 19
',' (44) 6 10
'{' (123) 14 17
'}' (125) 14 17
error (256) 4
CLASS (258)
ELSE (259)
FI (260)
IF (261)
IN (262)
INHERITS (263)
LET (264)
LOOP (265)
POOL (266)
THEN (267)
WHILE (268)
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
ASSIGN (280) 15 16
NOT (281)
LE (282)
ERROR (283)
UPPER (284)
LOWER (285)
WORD (286) 9 15 16 17 19 20
NEWLINE (287)
CHAR (288)
PRINT (289) 13
STRING (290) 21
INTEGER_CONST (291) 18
BOOL_CONST (292)
TYPE_DECL (293) 9 16 17
DEF (294) 17


Nonterminals, with rules where they appear

$accept (40)
    on left: 0
program (41)
    on left: 1, on right: 0
explist (42)
    on left: 2 3 4 5, on right: 1 3 4 14
explist_params (43)
    on left: 6 7 8, on right: 6 19
formal (44)
    on left: 9, on right: 10 11
formals (45)
    on left: 10 11 12, on right: 10 17
exp (46)
    on left: 13 14 15 16 17 18 19 20 21, on right: 2 3 6 7 13 15 16
    17


State 0

    0 $accept: . program "end of file"

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    program  go to state 8
    explist  go to state 9
    exp      go to state 10


State 1

   15 exp: WORD . ASSIGN exp
   19    | WORD . '(' explist_params ')'
   20    | WORD .

    ASSIGN  shift, and go to state 11
    '('     shift, and go to state 12

    $default  reduce using rule 20 (exp)


State 2

   13 exp: PRINT . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 13


State 3

   21 exp: STRING .

    $default  reduce using rule 21 (exp)


State 4

   18 exp: INTEGER_CONST .

    $default  reduce using rule 18 (exp)


State 5

   16 exp: TYPE_DECL . WORD ASSIGN exp

    WORD  shift, and go to state 14


State 6

   17 exp: DEF . TYPE_DECL WORD '(' formals ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 15


State 7

   14 exp: '{' . explist '}'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    explist  go to state 16
    exp      go to state 10


State 8

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 17


State 9

    1 program: explist .
    3 explist: explist . exp
    4        | explist . error

    error          shift, and go to state 18
    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    "end of file"  reduce using rule 1 (program)

    exp  go to state 19


State 10

    2 explist: exp .

    $default  reduce using rule 2 (explist)


State 11

   15 exp: WORD ASSIGN . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 20


State 12

   19 exp: WORD '(' . explist_params ')'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    $default  reduce using rule 8 (explist_params)

    explist_params  go to state 21
    exp             go to state 22


State 13

   13 exp: PRINT exp .

    $default  reduce using rule 13 (exp)


State 14

   16 exp: TYPE_DECL WORD . ASSIGN exp

    ASSIGN  shift, and go to state 23


State 15

   17 exp: DEF TYPE_DECL . WORD '(' formals ')' '{' exp '}'

    WORD  shift, and go to state 24


State 16

    3 explist: explist . exp
    4        | explist . error
   14 exp: '{' explist . '}'

    error          shift, and go to state 18
    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7
    '}'            shift, and go to state 25

    exp  go to state 19


State 17

    0 $accept: program "end of file" .

    $default  accept


State 18

    4 explist: explist error .

    $default  reduce using rule 4 (explist)


State 19

    3 explist: explist exp .

    $default  reduce using rule 3 (explist)


State 20

   15 exp: WORD ASSIGN exp .

    $default  reduce using rule 15 (exp)


State 21

    6 explist_params: explist_params . ',' exp
   19 exp: WORD '(' explist_params . ')'

    ','  shift, and go to state 26
    ')'  shift, and go to state 27


State 22

    7 explist_params: exp .

    $default  reduce using rule 7 (explist_params)


State 23

   16 exp: TYPE_DECL WORD ASSIGN . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 28


State 24

   17 exp: DEF TYPE_DECL WORD . '(' formals ')' '{' exp '}'

    '('  shift, and go to state 29


State 25

   14 exp: '{' explist '}' .

    $default  reduce using rule 14 (exp)


State 26

    6 explist_params: explist_params ',' . exp

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 30


State 27

   19 exp: WORD '(' explist_params ')' .

    $default  reduce using rule 19 (exp)


State 28

   16 exp: TYPE_DECL WORD ASSIGN exp .

    $default  reduce using rule 16 (exp)


State 29

   17 exp: DEF TYPE_DECL WORD '(' . formals ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 31

    $default  reduce using rule 12 (formals)

    formal   go to state 32
    formals  go to state 33


State 30

    6 explist_params: explist_params ',' exp .

    $default  reduce using rule 6 (explist_params)


State 31

    9 formal: TYPE_DECL . WORD

    WORD  shift, and go to state 34


State 32

   11 formals: formal .

    $default  reduce using rule 11 (formals)


State 33

   10 formals: formals . ',' formal
   17 exp: DEF TYPE_DECL WORD '(' formals . ')' '{' exp '}'

    ','  shift, and go to state 35
    ')'  shift, and go to state 36


State 34

    9 formal: TYPE_DECL WORD .

    $default  reduce using rule 9 (formal)


State 35

   10 formals: formals ',' . formal

    TYPE_DECL  shift, and go to state 31

    formal  go to state 37


State 36

   17 exp: DEF TYPE_DECL WORD '(' formals ')' . '{' exp '}'

    '{'  shift, and go to state 38


State 37

   10 formals: formals ',' formal .

    $default  reduce using rule 10 (formals)


State 38

   17 exp: DEF TYPE_DECL WORD '(' formals ')' '{' . exp '}'

    WORD           shift, and go to state 1
    PRINT          shift, and go to state 2
    STRING         shift, and go to state 3
    INTEGER_CONST  shift, and go to state 4
    TYPE_DECL      shift, and go to state 5
    DEF            shift, and go to state 6
    '{'            shift, and go to state 7

    exp  go to state 39


State 39

   17 exp: DEF TYPE_DECL WORD '(' formals ')' '{' exp . '}'

    '}'  shift, and go to state 40


State 40

   17 exp: DEF TYPE_DECL WORD '(' formals ')' '{' exp '}' .

    $default  reduce using rule 17 (exp)
