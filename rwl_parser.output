Terminals unused in grammar

   CLASS
   IN
   INHERITS
   LET
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   NOT
   LE
   ERROR
   UPPER
   LOWER
   NEWLINE
   CHAR
   BOOL_CONST


State 0 conflicts: 9 shift/reduce
State 9 conflicts: 9 shift/reduce
State 17 conflicts: 1 shift/reduce
State 27 conflicts: 1 shift/reduce
State 33 conflicts: 1 shift/reduce
State 38 conflicts: 1 shift/reduce


Grammar

    0 $accept: program "end of file"

    1 program: explist

    2 explist: exp
    3        | explist exp
    4        | explist error
    5        | %empty

    6 explist_params: explist_params ',' exp
    7               | exp
    8               | %empty

    9 formal: TYPE_DECL WORD

   10 formals: formals ',' formal
   11        | formal
   12        | %empty

   13 exp: PRINT exp
   14    | '{' explist '}'
   15    | IF '(' exp ')' THEN exp ELSE exp FI
   16    | WHILE '(' exp ')' LOOP exp POOL
   17    | WORD ASSIGN exp
   18    | TYPE_DECL WORD ASSIGN exp
   19    | DEF TYPE_DECL WORD '(' formals ')' '{' exp '}'
   20    | INTEGER_CONST
   21    | WORD '(' explist_params ')'
   22    | WORD
   23    | STRING
   24    | exp '+' exp


Terminals, with rules where they appear

"end of file" (0) 0
'(' (40) 15 16 19 21
')' (41) 15 16 19 21
'+' (43) 24
',' (44) 6 10
'{' (123) 14 19
'}' (125) 14 19
error (256) 4
CLASS (258)
ELSE (259) 15
FI (260) 15
IF (261) 15
IN (262)
INHERITS (263)
LET (264)
LOOP (265) 16
POOL (266) 16
THEN (267) 15
WHILE (268) 16
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
ASSIGN (280) 17 18
NOT (281)
LE (282)
ERROR (283)
UPPER (284)
LOWER (285)
WORD (286) 9 17 18 19 21 22
NEWLINE (287)
CHAR (288)
PRINT (289) 13
STRING (290) 23
INTEGER_CONST (291) 20
BOOL_CONST (292)
TYPE_DECL (293) 9 18 19
DEF (294) 19


Nonterminals, with rules where they appear

$accept (41)
    on left: 0
program (42)
    on left: 1, on right: 0
explist (43)
    on left: 2 3 4 5, on right: 1 3 4 14
explist_params (44)
    on left: 6 7 8, on right: 6 21
formal (45)
    on left: 9, on right: 10 11
formals (46)
    on left: 10 11 12, on right: 10 19
exp (47)
    on left: 13 14 15 16 17 18 19 20 21 22 23 24, on right: 2 3 6 7
    13 15 16 17 18 19 24


State 0

    0 $accept: . program "end of file"

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    IF             [reduce using rule 5 (explist)]
    WHILE          [reduce using rule 5 (explist)]
    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    program  go to state 10
    explist  go to state 11
    exp      go to state 12


State 1

   15 exp: IF . '(' exp ')' THEN exp ELSE exp FI

    '('  shift, and go to state 13


State 2

   16 exp: WHILE . '(' exp ')' LOOP exp POOL

    '('  shift, and go to state 14


State 3

   17 exp: WORD . ASSIGN exp
   21    | WORD . '(' explist_params ')'
   22    | WORD .

    ASSIGN  shift, and go to state 15
    '('     shift, and go to state 16

    $default  reduce using rule 22 (exp)


State 4

   13 exp: PRINT . exp

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 17


State 5

   23 exp: STRING .

    $default  reduce using rule 23 (exp)


State 6

   20 exp: INTEGER_CONST .

    $default  reduce using rule 20 (exp)


State 7

   18 exp: TYPE_DECL . WORD ASSIGN exp

    WORD  shift, and go to state 18


State 8

   19 exp: DEF . TYPE_DECL WORD '(' formals ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 19


State 9

   14 exp: '{' . explist '}'

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    IF             [reduce using rule 5 (explist)]
    WHILE          [reduce using rule 5 (explist)]
    WORD           [reduce using rule 5 (explist)]
    PRINT          [reduce using rule 5 (explist)]
    STRING         [reduce using rule 5 (explist)]
    INTEGER_CONST  [reduce using rule 5 (explist)]
    TYPE_DECL      [reduce using rule 5 (explist)]
    DEF            [reduce using rule 5 (explist)]
    '{'            [reduce using rule 5 (explist)]
    $default       reduce using rule 5 (explist)

    explist  go to state 20
    exp      go to state 12


State 10

    0 $accept: program . "end of file"

    "end of file"  shift, and go to state 21


State 11

    1 program: explist .
    3 explist: explist . exp
    4        | explist . error

    error          shift, and go to state 22
    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    "end of file"  reduce using rule 1 (program)

    exp  go to state 23


State 12

    2 explist: exp .
   24 exp: exp . '+' exp

    '+'  shift, and go to state 24

    $default  reduce using rule 2 (explist)


State 13

   15 exp: IF '(' . exp ')' THEN exp ELSE exp FI

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 25


State 14

   16 exp: WHILE '(' . exp ')' LOOP exp POOL

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 26


State 15

   17 exp: WORD ASSIGN . exp

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 27


State 16

   21 exp: WORD '(' . explist_params ')'

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    $default  reduce using rule 8 (explist_params)

    explist_params  go to state 28
    exp             go to state 29


State 17

   13 exp: PRINT exp .
   24    | exp . '+' exp

    '+'  shift, and go to state 24

    '+'       [reduce using rule 13 (exp)]
    $default  reduce using rule 13 (exp)


State 18

   18 exp: TYPE_DECL WORD . ASSIGN exp

    ASSIGN  shift, and go to state 30


State 19

   19 exp: DEF TYPE_DECL . WORD '(' formals ')' '{' exp '}'

    WORD  shift, and go to state 31


State 20

    3 explist: explist . exp
    4        | explist . error
   14 exp: '{' explist . '}'

    error          shift, and go to state 22
    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9
    '}'            shift, and go to state 32

    exp  go to state 23


State 21

    0 $accept: program "end of file" .

    $default  accept


State 22

    4 explist: explist error .

    $default  reduce using rule 4 (explist)


State 23

    3 explist: explist exp .
   24 exp: exp . '+' exp

    '+'  shift, and go to state 24

    $default  reduce using rule 3 (explist)


State 24

   24 exp: exp '+' . exp

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 33


State 25

   15 exp: IF '(' exp . ')' THEN exp ELSE exp FI
   24    | exp . '+' exp

    ')'  shift, and go to state 34
    '+'  shift, and go to state 24


State 26

   16 exp: WHILE '(' exp . ')' LOOP exp POOL
   24    | exp . '+' exp

    ')'  shift, and go to state 35
    '+'  shift, and go to state 24


State 27

   17 exp: WORD ASSIGN exp .
   24    | exp . '+' exp

    '+'  shift, and go to state 24

    '+'       [reduce using rule 17 (exp)]
    $default  reduce using rule 17 (exp)


State 28

    6 explist_params: explist_params . ',' exp
   21 exp: WORD '(' explist_params . ')'

    ','  shift, and go to state 36
    ')'  shift, and go to state 37


State 29

    7 explist_params: exp .
   24 exp: exp . '+' exp

    '+'  shift, and go to state 24

    $default  reduce using rule 7 (explist_params)


State 30

   18 exp: TYPE_DECL WORD ASSIGN . exp

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 38


State 31

   19 exp: DEF TYPE_DECL WORD . '(' formals ')' '{' exp '}'

    '('  shift, and go to state 39


State 32

   14 exp: '{' explist '}' .

    $default  reduce using rule 14 (exp)


State 33

   24 exp: exp . '+' exp
   24    | exp '+' exp .

    '+'  shift, and go to state 24

    '+'       [reduce using rule 24 (exp)]
    $default  reduce using rule 24 (exp)


State 34

   15 exp: IF '(' exp ')' . THEN exp ELSE exp FI

    THEN  shift, and go to state 40


State 35

   16 exp: WHILE '(' exp ')' . LOOP exp POOL

    LOOP  shift, and go to state 41


State 36

    6 explist_params: explist_params ',' . exp

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 42


State 37

   21 exp: WORD '(' explist_params ')' .

    $default  reduce using rule 21 (exp)


State 38

   18 exp: TYPE_DECL WORD ASSIGN exp .
   24    | exp . '+' exp

    '+'  shift, and go to state 24

    '+'       [reduce using rule 18 (exp)]
    $default  reduce using rule 18 (exp)


State 39

   19 exp: DEF TYPE_DECL WORD '(' . formals ')' '{' exp '}'

    TYPE_DECL  shift, and go to state 43

    $default  reduce using rule 12 (formals)

    formal   go to state 44
    formals  go to state 45


State 40

   15 exp: IF '(' exp ')' THEN . exp ELSE exp FI

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 46


State 41

   16 exp: WHILE '(' exp ')' LOOP . exp POOL

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 47


State 42

    6 explist_params: explist_params ',' exp .
   24 exp: exp . '+' exp

    '+'  shift, and go to state 24

    $default  reduce using rule 6 (explist_params)


State 43

    9 formal: TYPE_DECL . WORD

    WORD  shift, and go to state 48


State 44

   11 formals: formal .

    $default  reduce using rule 11 (formals)


State 45

   10 formals: formals . ',' formal
   19 exp: DEF TYPE_DECL WORD '(' formals . ')' '{' exp '}'

    ','  shift, and go to state 49
    ')'  shift, and go to state 50


State 46

   15 exp: IF '(' exp ')' THEN exp . ELSE exp FI
   24    | exp . '+' exp

    ELSE  shift, and go to state 51
    '+'   shift, and go to state 24


State 47

   16 exp: WHILE '(' exp ')' LOOP exp . POOL
   24    | exp . '+' exp

    POOL  shift, and go to state 52
    '+'   shift, and go to state 24


State 48

    9 formal: TYPE_DECL WORD .

    $default  reduce using rule 9 (formal)


State 49

   10 formals: formals ',' . formal

    TYPE_DECL  shift, and go to state 43

    formal  go to state 53


State 50

   19 exp: DEF TYPE_DECL WORD '(' formals ')' . '{' exp '}'

    '{'  shift, and go to state 54


State 51

   15 exp: IF '(' exp ')' THEN exp ELSE . exp FI

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 55


State 52

   16 exp: WHILE '(' exp ')' LOOP exp POOL .

    $default  reduce using rule 16 (exp)


State 53

   10 formals: formals ',' formal .

    $default  reduce using rule 10 (formals)


State 54

   19 exp: DEF TYPE_DECL WORD '(' formals ')' '{' . exp '}'

    IF             shift, and go to state 1
    WHILE          shift, and go to state 2
    WORD           shift, and go to state 3
    PRINT          shift, and go to state 4
    STRING         shift, and go to state 5
    INTEGER_CONST  shift, and go to state 6
    TYPE_DECL      shift, and go to state 7
    DEF            shift, and go to state 8
    '{'            shift, and go to state 9

    exp  go to state 56


State 55

   15 exp: IF '(' exp ')' THEN exp ELSE exp . FI
   24    | exp . '+' exp

    FI   shift, and go to state 57
    '+'  shift, and go to state 24


State 56

   19 exp: DEF TYPE_DECL WORD '(' formals ')' '{' exp . '}'
   24    | exp . '+' exp

    '}'  shift, and go to state 58
    '+'  shift, and go to state 24


State 57

   15 exp: IF '(' exp ')' THEN exp ELSE exp FI .

    $default  reduce using rule 15 (exp)


State 58

   19 exp: DEF TYPE_DECL WORD '(' formals ')' '{' exp '}' .

    $default  reduce using rule 19 (exp)
